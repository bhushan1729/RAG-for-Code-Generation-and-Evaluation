import os
from utils import load_vectordb, extract_queries, load_vectordb, get_test_case_code, evaluate_code_with_llm



initial_prompt_phi4 = '''
<|user|>  
### The text contains test cases, test steps, and corresponding Python codes:  
- The beginning section provides one similar test cases, along with Python code written by humans.  
- At the end, it includes the test steps for a new test case to be automated and the code generated by an LLM for this case.    

### Evaluation Guidelines:  
- **Score** the generated code on a scale of 1 to 10.  
- **Highlight all issues** in the generated code, including missing elements, incorrect logic, or deviations from the provided test steps.  
- **Provide a justification** for your score, focusing on alignment with the test steps and identifying any missing or incorrect parts.
- **Understand the comments between the code and log messages to map steps to the corresponding code blocks**
- **Avoid redundant comments; if the steps are clear, corresponding code block is present and the logic is correct, do not add comments.**  
- Use **Chain of Thought reasoning** to explain your analysis clearly.

### Scoring Guide:  
- **1-3:** Very poor results. The code has major issues or hallucinations and requires significant modifications to run the test case.  
- **4-5:** Unusable code. It is somewhat related to the input steps but misses key objectives. Debugging would take more time than rewriting.  
- **6-7:** Adequate results. The code is usable but needs adjustments, such as fixing incomplete functions or incorrect function calls.  
- **8:** Good results. The code achieves the objective, with only minor issues (e.g., logging errors, variable name mismatches).  
- **9-10:** Very good results. The code aligns well with the steps, achieves the objective, and can be executed without issues.  
Ensure your evaluation includes the score, a detailed explanation, and any recommendations for improvement.

### Task:
You need to follow these three tasks one by one
-Review the code based on the "Evaluation Guidelines" and "Scoring Guide" provided.
-Generate the code again using all suggestions got in the review and considering the similar test case as references.
-Review the updated code based on the same "Evaluation Guidelines" and "Scoring Guide" provided above. 

###Expected Output: Review and score the provided code based on the given guidelines. Then, improve the code using the suggestions from your review. Finally, review and score the updated code again using the same guidelines.<|end|>
'''

def write_to_file(query, initial_prompt, vectordb, search_folder, generated_folder, output_file_path):
    """
    Write formatted content to a file with data extracted from specific folders.
    
    Args:
        query (str): The query text containing the name line.
        initial_prompt (str): The initial prompt to be included in the file.
        query_folder (str): Path to the folder containing queries.
        generated_folder (str): Path to the folder containing generated code files.
        output_file_path (str): The path to the output text file.
    """
    # Extract the query name
    query_name = ([line for line in query.splitlines() if line.strip().startswith("Name:")][0].split(':')[-1]).strip()

    # Find the generated code file
    generated_file = None
    for file_name in os.listdir(generated_folder):
        if file_name.startswith(query_name) and file_name.endswith(".txt"):
            generated_file = os.path.join(generated_folder, file_name)
            break

    if not generated_file:
        raise FileNotFoundError(f"Generated file not found for query name: {query_name}")


    # Extract the generated code
    with open(generated_file, 'r', encoding='utf-8') as gen_file:
        gen_content = gen_file.read()
    
    generated_code = ""
    start_marker = "```python"
    end_marker = "```"
    if start_marker in gen_content and end_marker in gen_content:
        generated_code = gen_content.split(start_marker)[1].split(end_marker)[0].strip()
    else:
        raise ValueError("Generated code markers not found in the generated file.")


    # Retrieve the top 3 most relevant documents
    docs_with_scores = vectordb.similarity_search_with_score(query, k=1)

    # Write all the content to the output file
    with open(output_file_path, 'w', encoding='utf-8') as output_file:
        output_file.write(f"{initial_prompt}\n\n")
        
        # Initialize the counter for test case numbering
        counter = 1

        for doc, _ in docs_with_scores:
            first_line = doc.page_content.split('\n')[0]
            if first_line.startswith("Name:"):
                test_case_name = first_line.split(":")[1].strip()
                output_file.write(f"###Similar Test Case {counter}###: Generate a Python script based on the provided testing steps to verify test mention in the summary.\n\n")
                output_file.write(doc.page_content)

                # Fetch and write the code
                code = get_test_case_code(test_case_name, search_folder)
                output_file.write(f"\n\n###Similar Test Case Python Code {counter}###:\n{code}\n\n\n")
                
                # Increment the counter for the next test case
                counter += 1
        #output_file.write(f"Original_code: \n```\n{original_code}\n```\n\n\n")
        output_file.write(f"###Test Case to be Automated:### {query}\n\n")
        output_file.write(f"###Code Generated by LLM:### \n```\n{generated_code}<|end|>\n```\n\n\n")
        output_file.write('<|assistant|>')

    print(f"File written successfully at {output_file_path}")
    return query_name, generated_file


initial_prompt = initial_prompt_phi4
generated_folder = r"path\to\generated\code\folder"
temp_file = "temp.txt"
faiss_path = "vector_database/faiss_index"
search_folder = "data\test_cases_code" 
vectordb = load_vectordb(faiss_path)
testing_cases = '/home/ml/Bhushan - Thales/Text Files/Testing Cases Barish.txt'
output_folder_path = r'path\to\output\folder' #folder path where user want to save output

queries = extract_queries(testing_cases)
for query in queries:

    query_name, generated_file_path = write_to_file(query, initial_prompt, vectordb, search_folder, generated_folder, temp_file)

    # Example Usage
    prompt_file_path = temp_file
    query_name = query_name
    #original_file_path = original_file_path
    generated_file_path = generated_file_path
    evaluate_code_with_llm(prompt_file_path, query_name, model='phi4:latest', output_folder_path=output_folder_path)